services:
  model_service:
    build:
      context: ./Backend/model_service
      dockerfile: Dockerfile
    ports:
      - "${MODEL_SERVICE_PORT}:${MODEL_SERVICE_PORT}"
    environment:
      - MODEL_URL=${MODEL_URL}
      - CHROMA_URL=http://chroma:8000
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
    depends_on:
      - postgres
    networks:
      - ai_network

  embedding_service:
    build:
      context: ./Backend/embedding_service
      dockerfile: Dockerfile
    ports:
      - "${EMBEDDING_SERVICE_PORT}:${EMBEDDING_SERVICE_PORT}"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - CHROMA_OPEN_TELEMETRY__ENDPOINT=http://otel-collector:4317/
      - CHROMA_OPEN_TELEMETRY__SERVICE_NAME=chroma
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
      - CHROMA_PERSIST_DIRECTORY=/chroma/chroma
      - CHROMA_URL=http://chroma:8000
    depends_on:
      chroma:
        condition: service_started
    volumes:
      - ./Backend/embedding_service/persistence/chroma:/chroma/chroma
    restart: on-failure
    command: >
      sh -c "echo 'Attente de ChromaDB...' &&
             sleep 30 &&
             npm run start:dev"
    networks:
      - ai_network

  chroma_init:
    build:
      context: ./ChromaDB
      dockerfile: init.Dockerfile
    environment:
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8000
      - EMBEDDING_SERVICE_URL=http://embedding_service:3002
      - QUERIES_FOLDER=/app/queries
      - INITIAL_WAIT_TIME=30
    volumes:
      - ./ChromaDB/Queries:/app/queries
    depends_on:
      chroma:
        condition: service_started
    restart: on-failure
    networks:
      - ai_network

  postgres:
    container_name: postgres
    image: ankane/pgvector:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./Database/init_db.sql:/docker-entrypoint-initdb.d/1-init_db.sql
      - ./Database/seed.sql:/docker-entrypoint-initdb.d/2-seed.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ai_network
  
  chroma:
    container_name: chroma
    image: ghcr.io/chroma-core/chroma:0.4.0
    ports:
      - "8000:8000"
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - ai_network
    environment:
      - CHROMA_DB_IMPL=duckdb+parquet
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
      - CHROMA_PERSIST_DIRECTORY=/chroma/chroma
      - ALLOW_RESET=TRUE
    command: >
      sh -c "pip uninstall -y numpy && 
             pip install numpy==1.24.4 && 
             python -m uvicorn chromadb.app:app --reload --workers 1 --host 0.0.0.0 --port 8000 --log-level=info"

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: "pgadmin@pgadmin.com"
      PGADMIN_DEFAULT_PASSWORD: "pgadmin"
    networks:
      - ai_network


  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    depends_on: [otel-collector]
    networks:
      - ai_network
  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib:0.111.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./ChromaDB/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    networks:
      - ai_network

  rag_service:
    build:
      context: ./Backend/rag_service
      dockerfile: Dockerfile
    ports:
      - "${RAG_SERVICE_PORT:-3003}:3003"
    environment:
      - MODEL_SERVICE_URL=http://model_service:${MODEL_SERVICE_PORT:-3001}
      - EMBEDDING_SERVICE_URL=http://embedding_service:${EMBEDDING_SERVICE_PORT:-3002}
      - CHROMA_URL=http://chroma:8000
      - SIMILARITY_THRESHOLD=0.85
    depends_on:
      embedding_service:
        condition: service_started
    restart: on-failure
    command: >
      sh -c "echo 'Attente des services...' &&
             sleep 30 &&
             npm run start:dev"
    networks:
      - ai_network

volumes:
  postgres_data:
  chroma_data:

networks:
  ai_network:
    driver: bridge
